import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from openai import OpenAI
import asyncio

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh API keys t·ª´ environment variables
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Ki·ªÉm tra API keys
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is not set")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is not set")

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# Dictionary ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat c·ªßa t·ª´ng user
user_conversations = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /start"""
    user_id = update.effective_user.id
    user_conversations[user_id] = []
    
    welcome_message = """
ü§ñ Xin ch√†o! T√¥i l√† ChatGPT Bot.

C√°c l·ªánh c√≥ s·∫µn:
/start - B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán
/clear - X√≥a l·ªãch s·ª≠ chat
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p

Ch·ªâ c·∫ßn g·ª≠i tin nh·∫Øn v√† t√¥i s·∫Ω tr·∫£ l·ªùi b·∫°n!
    """
    await update.message.reply_text(welcome_message)

async def clear_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X√≥a l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán"""
    user_id = update.effective_user.id
    user_conversations[user_id] = []
    await update.message.reply_text("‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Hi·ªÉn th·ªã tr·ª£ gi√∫p"""
    help_text = """
ü§ñ ChatGPT Telegram Bot

L·ªánh:
/start - Kh·ªüi ƒë·ªông bot
/clear - X√≥a l·ªãch s·ª≠ chat
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y

T√≠nh nƒÉng:
‚Ä¢ Tr√≤ chuy·ªán v·ªõi ChatGPT
‚Ä¢ L∆∞u ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán
‚Ä¢ H·ªó tr·ª£ ti·∫øng Vi·ªát
    """
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω tin nh·∫Øn t·ª´ user v√† g·ª≠i ƒë·∫øn ChatGPT"""
    user_id = update.effective_user.id
    user_message = update.message.text
    
    # Kh·ªüi t·∫°o conversation n·∫øu ch∆∞a c√≥
    if user_id not in user_conversations:
        user_conversations[user_id] = []
    
    # Th√™m tin nh·∫Øn c·ªßa user v√†o l·ªãch s·ª≠
    user_conversations[user_id].append({
        "role": "user", 
        "content": user_message
    })
    
    # Gi·ªõi h·∫°n l·ªãch s·ª≠ (ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° token limit)
    if len(user_conversations[user_id]) > 20:
        user_conversations[user_id] = user_conversations[user_id][-20:]
    
    try:
        # G·ª≠i "typing..." ƒë·ªÉ user bi·∫øt bot ƒëang x·ª≠ l√Ω
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        # G·ªçi OpenAI API
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Ho·∫∑c "gpt-4" n·∫øu c√≥ quy·ªÅn truy c·∫≠p
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch, tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."}
            ] + user_conversations[user_id],
            max_tokens=1000,
            temperature=0.7
        )
        
        # L·∫•y ph·∫£n h·ªìi t·ª´ ChatGPT
        bot_reply = response.choices[0].message.content
        
        # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o l·ªãch s·ª≠
        user_conversations[user_id].append({
            "role": "assistant",
            "content": bot_reply
        })
        
        # G·ª≠i ph·∫£n h·ªìi cho user
        await update.message.reply_text(bot_reply)
        
    except openai.RateLimitError:
        await update.message.reply_text("‚ùå ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.")
    except openai.APIError as e:
        logger.error(f"OpenAI API error: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra v·ªõi API. Vui l√≤ng th·ª≠ l·∫°i.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªói"""
    logger.warning(f'Update {update} caused error {context.error}')

def main():
    """Kh·ªüi ch·∫°y bot"""
    # Ki·ªÉm tra API keys tr∆∞·ªõc khi kh·ªüi t·∫°o
    if not TELEGRAM_TOKEN:
        print("‚ùå TELEGRAM_TOKEN kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return
    if not OPENAI_API_KEY:
        print("‚ùå OPENAI_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return
    
    try:
        # T·∫°o Application
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # ƒêƒÉng k√Ω handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("clear", clear_conversation))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # ƒêƒÉng k√Ω error handler
        application.add_error_handler(error_handler)
        
        # Ch·∫°y bot
        print("ü§ñ Bot ƒëang ch·∫°y...")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"L·ªói kh·ªüi ƒë·ªông bot: {e}")
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông: {e}")

if __name__ == '__main__':
    main()
