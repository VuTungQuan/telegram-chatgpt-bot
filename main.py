import os
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from openai import OpenAI
import asyncio
import json

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask app
app = Flask(__name__)

# C·∫•u h√¨nh API keys t·ª´ environment variables
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-app.onrender.com")

# Ki·ªÉm tra API keys
if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("API keys not configured")

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# Dictionary ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
user_conversations = {}

# T·∫°o application
application = Application.builder().token(TELEGRAM_TOKEN).build()

# Handlers (gi·ªëng nh∆∞ code c≈©)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_conversations[user_id] = []
    
    welcome_message = """
ü§ñ Xin ch√†o! T√¥i l√† ChatGPT Bot.

C√°c l·ªánh c√≥ s·∫µn:
/start - B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán
/clear - X√≥a l·ªãch s·ª≠ chat
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p

Ch·ªâ c·∫ßn g·ª≠i tin nh·∫Øn v√† t√¥i s·∫Ω tr·∫£ l·ªùi b·∫°n!
    """
    await update.message.reply_text(welcome_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    if user_id not in user_conversations:
        user_conversations[user_id] = []
    
    user_conversations[user_id].append({
        "role": "user", 
        "content": user_message
    })
    
    if len(user_conversations[user_id]) > 20:
        user_conversations[user_id] = user_conversations[user_id][-20:]
    
    try:
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch, tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."}
            ] + user_conversations[user_id],
            max_tokens=1000,
            temperature=0.7
        )
        
        bot_reply = response.choices[0].message.content
        
        user_conversations[user_id].append({
            "role": "assistant",
            "content": bot_reply
        })
        
        await update.message.reply_text(bot_reply)
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")

# ƒêƒÉng k√Ω handlers
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    """X·ª≠ l√Ω webhook t·ª´ Telegram"""
    try:
        json_data = request.get_json()
        update = Update.de_json(json_data, application.bot)
        
        # Ch·∫°y handler trong event loop m·ªõi
        asyncio.run(application.process_update(update))
        
        return 'OK'
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return 'Error', 500

@app.route('/')
def index():
    return 'Telegram ChatGPT Bot is running!'

if __name__ == '__main__':
    # Thi·∫øt l·∫≠p webhook
    asyncio.run(application.bot.set_webhook(f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}"))
    
    # Ch·∫°y Flask app
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
